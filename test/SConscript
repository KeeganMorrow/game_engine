import os

def test_wrapper_script(target, source, env):
    filepath = Dir('.').abspath + "/runTests.sh"
    try:
        testscript = open(filepath, "w")
        testscript.write("#!/usr/bin/env sh\nDIR=$(dirname $0)\nRET=0\n")
        for test in source:
            testscript.write("${DIR}/%s\n" % (test))
            testscript.write("EXIT=$?\nif [ $EXIT -ne 0 ]; then\n    RET=$EXIT\nfi\n")
    except IOError:
        print "Error: Failed writing runTests.sh"
    finally:
        testscript.write("exit $RET\n")
        testscript.close()
    os.chmod("runTests.sh", 0744)
    return None



# Import the environment configured in SConstruct
Import('env')

localenv = env.Clone()

localenv.Append(CPPPATH=['#lib/gtest/include'])
localenv.Append(CPPPATH=['#lib/gmock/include'])
#Hack - Make this more intelligent and selective later
localenv.Append(CPPPATH=['#src/inc'])
localenv.Append(CPPPATH=['#include/sdlwrap'])
test_wrapper_script_builder = Builder(action=test_wrapper_script, suffix='.sh')
localenv.Append(BUILDERS={'TestWrapperScript': test_wrapper_script_builder})

testlibs=['gmock', 'pthread', 'SDL2', 'SDL2_image']

logmod = localenv.Object('logging', ['../src/core/logging/logging.cpp'])

runtestmod = localenv.Object('runtests',['runtests.cpp'])

# Run the child files!
testsrcs = []
alltestmodules = []
for root, dirs, files in os.walk(Dir('.').srcnode().abspath):
    for file in files:
        if file.endswith(".cpp"):
             if file !=  "runtests.cpp":
                 path=str(os.path.relpath(os.path.join(root,file),Dir('.').srcnode().abspath))
                 print "found test_target in location \"%s\"" % path
                 testsrcs.append(path)

alltestmodules = []
# Build individual test programs and get ready to build all tests
# TODO: ALlow selection of tests (ie test/core/management)


tests=[]
for test in testsrcs:
    testpath = str(test)
    print testpath
    no_ext = os.path.splitext(testpath)[0]
    dirname,basename = os.path.split(no_ext)
    testname = no_ext.replace('/', '_') + '_test'
    print testname
    srcpath = '../src/' + no_ext + '.cpp'

    srcmod = localenv.Object(no_ext.replace('/', '_') + '_tested',[srcpath])
    testprog = localenv.Program(target=testname, source=[testpath, srcmod, runtestmod, logmod], LIBS=testlibs)

    tests.append(testname)

localenv.TestWrapperScript(tests)
